# MediaPipe graph that performs selfie segmentation with TensorFlow Lite on CPU.

# CPU buffer. (ImageFrame)
input_stream: "input_video"

# Output image with rendered results. (ImageFrame)
output_stream: "output_video"

# ImageFormat::SRGB(=CV_8UC3)
output_stream: "output_corpus_mask"

# ImageFormat::SRGB(=CV_8UC3)
output_stream: "output_face_mask"

# ImageFormat::VEC32F1(=CV_32FC1), values scaled 0 to 1.
output_stream: "output_selfie_mask"

# Throttles the images flowing downstream for flow control. It passes through
# the very first incoming image unaltered, and waits for downstream nodes
# (calculators and subgraphs) in the graph to finish their tasks before it
# passes through another image. All images that come in while waiting are
# dropped, limiting the number of in-flight images in most part of the graph to
# 1. This prevents the downstream nodes from queuing up incoming images and data
# excessively, which leads to increased latency and memory usage, unwanted in
# real-time mobile applications. It also eliminates unnecessarily computation,
# e.g., the output produced by a node may get dropped downstream if the
# subsequent nodes are still busy processing previous inputs.
node {
  calculator: "FlowLimiterCalculator"
  input_stream: "input_video"
  input_stream: "FINISHED:output_video"
  input_stream_info: {
    tag_index: "FINISHED"
    back_edge: true
  }
  output_stream: "throttled_input_video"
}

node {
  calculator: "ImagePropertiesCalculator"
  input_stream: "IMAGE:throttled_input_video"
  output_stream: "SIZE:image_size"
}

# Subgraph that performs selfie segmentation.
node {
  calculator: "SelfieSegmentationCpu"
  input_stream: "IMAGE:throttled_input_video"
  output_stream: "SEGMENTATION_MASK:output_selfie_mask"
}

# Defines side packets for further use in the graph.
node {
  calculator: "ConstantSidePacketCalculator"
  output_side_packet: "PACKET:0:num_faces"
  output_side_packet: "PACKET:1:with_attention"
  node_options: {
    [type.googleapis.com/mediapipe.ConstantSidePacketCalculatorOptions]: {
      packet { int_value: 1 }
      packet { bool_value: false }
    }
  }
}

# Subgraph that detects faces and corresponding landmarks.
node {
  calculator: "FaceLandmarkFrontCpu"
  input_stream: "IMAGE:throttled_input_video"
  input_side_packet: "NUM_FACES:num_faces"
  input_side_packet: "WITH_ATTENTION:with_attention"
  output_stream: "LANDMARKS:multi_face_landmarks"
  output_stream: "ROIS_FROM_LANDMARKS:face_rects_from_landmarks"
  output_stream: "DETECTIONS:face_detections"
  output_stream: "ROIS_FROM_DETECTIONS:face_rects_from_detections"
}

# [Corpus mask: Start]
node {
  calculator: "SplitNormalizedRectVectorCalculator"
  input_stream: "face_rects_from_landmarks"
  output_stream: "rect"
  node_options: {
    [type.googleapis.com/mediapipe.SplitVectorCalculatorOptions] {
      ranges: { begin: 0 end: 1 }
      element_only: true
    }
  }
}

node {
  calculator: "RectTransformationCalculator"
  input_stream: "NORM_RECT:rect"
  input_stream: "IMAGE_SIZE:image_size"
  output_stream: "corpus_rect"
  options: {
    [mediapipe.RectTransformationCalculatorOptions.ext] {
      scale_x: 1.25
      scale_y: 0.75
      shift_y: -0.6
      square_long: true
    }
  }
}

# Converts normalized rects to drawing primitives for annotation overlay.
node {
  calculator: "RectToRenderDataCalculator"
  #input_stream: "NORM_RECTS:corpus_rect"
  input_stream: "NORM_RECT:corpus_rect"
  #output_stream: "RENDER_DATA:rects_render_data"
  output_stream: "RENDER_DATA:corpus_rect_render_data"
  node_options: {
    [type.googleapis.com/mediapipe.RectToRenderDataCalculatorOptions] {
      filled: true
      color { r: 255 g: 255 b: 255 }
      thickness: 2.0
    }
  }
}

# Draws corpus area and overlays them on top of the input images.
node {
  calculator: "AnnotationOverlayCalculator"
  input_stream: "corpus_rect_render_data"
  output_stream: "IMAGE:output_corpus_mask"
  node_options: {
    [type.googleapis.com/mediapipe.AnnotationOverlayCalculatorOptions] {
      canvas_color { r: 0 g: 0 b: 0 }
      canvas_width_px: 640
      canvas_height_px: 480
    }
  }
}
# [Corpus mask: END]

# [Face mask: Start]
# Outputs each element of multi_face_landmarks at a fake timestamp for the rest
# of the graph to process. At the end of the loop, outputs the BATCH_END
# timestamp for downstream calculators to inform them that all elements in the
# vector have been processed.
node {
  calculator: "BeginLoopNormalizedLandmarkListVectorCalculator"
  input_stream: "ITERABLE:multi_face_landmarks"
  output_stream: "ITEM:face_landmarks"
  output_stream: "BATCH_END:landmark_timestamp"
}

# Converts landmarks to drawing primitives for annotation overlay.
node {
  calculator: "FaceLandmarksToRenderDataCalculator"
  input_stream: "NORM_LANDMARKS:face_landmarks"
  output_stream: "RENDER_DATA:landmarks_render_data"
  node_options: {
    [type.googleapis.com/mediapipe.LandmarksToRenderDataCalculatorOptions] {
      #landmark_color { r: 255 g: 0 b: 0 }
      connection_color { r: 255 g: 255 b: 255 }
      thickness: 1
      visualize_landmark_depth: false
    }
  }
}

# Collects a RenderData object for each hand into a vector. Upon receiving the
# BATCH_END timestamp, outputs the vector of RenderData at the BATCH_END
# timestamp.
node {
  calculator: "EndLoopRenderDataCalculator"
  input_stream: "ITEM:landmarks_render_data"
  input_stream: "BATCH_END:landmark_timestamp"
  output_stream: "ITERABLE:multi_face_landmarks_render_data"
}

# Draws face mask and overlays them on top of the input images.
node {
  calculator: "AnnotationOverlayCalculator"
  input_stream: "VECTOR:0:multi_face_landmarks_render_data"
  output_stream: "IMAGE:output_face_mask"
  node_options: {
    [type.googleapis.com/mediapipe.AnnotationOverlayCalculatorOptions] {
      canvas_color { r: 0 g: 0 b: 0 }
      canvas_width_px: 640
      canvas_height_px: 480
    }
  }
}
# [Corpus mask: END]

node {
  calculator: "PassThroughCalculator"
  input_stream: "IMAGE:throttled_input_video"
  output_stream: "IMAGE:output_video"
}